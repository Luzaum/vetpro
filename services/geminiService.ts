import { Question } from "../types";
import { getGeminiKey, getGeminiModel, getOpenAIKey, getOpenAIModel } from "./ai";

const API_BASE = "https://generativelanguage.googleapis.com/v1beta";
const DEFAULT_MODEL = getGeminiModel();

const getGeminiApiKey = (): string | null => getGeminiKey();

export const composeLuzaumPrompt = (q: Question): string => {
  const topics = q.topic_tags?.join(", ") || q.area_tags?.join(", ") || "tema abordado";
  return [
    `N√ÉO RELEIA ou RESUMA o enunciado. N√£o mencione que est√° analisando a quest√£o. Foque somente na revis√£o educativa do tema, sem citar o enunciado.`,
    `ü©∫ Ol√°! Eu sou o **Dr. Luzaum**, m√©dico-veterin√°rio com PhD em m√∫ltiplas especialidades veterin√°rias! üòä`,
    ``,
    `Vou fazer uma revis√£o educativa COMPLETA sobre **${topics}** para voc√™, explicando cada conceito de forma did√°tica! üéì‚ú®`,
    ``,
    `üî¨ **Minha abordagem de ensino:**`,
    `- Explica√ß√µes parte por parte de cada conceito üìö`,
    `- Correla√ß√µes fisiol√≥gicas e fisiopatol√≥gicas üß¨`,
    `- Fundamenta√ß√£o com literatura de refer√™ncia üìñ`,
    `- Dicas pr√°ticas para memoriza√ß√£o üí°`,
    `- Conex√µes entre conceitos para facilitar o aprendizado üîó`,
    ``,
    `üìã **Estrutura da minha revis√£o educativa:**`,
    ``,
    `## ü¶† **Etiologia**`,
    `As causas e fatores que levam ao desenvolvimento da condi√ß√£o`,
    ``,
    `## üìä **Epidemiologia**`, 
    `Dados populacionais, predisposi√ß√µes raciais, de idade e fatores de risco`,
    ``,
    `## ü´Ä **Fisiologia Normal**`,
    `Como o sistema funciona em condi√ß√µes normais`,
    ``,
    `## ‚ö†Ô∏è **Fisiopatologia**`,
    `Mecanismos pelos quais a doen√ßa se desenvolve e progride`,
    ``,
    `## üî¨ **Patologia**`,
    `Altera√ß√µes macro e microsc√≥picas caracter√≠sticas`,
    ``,
    `## ü©∫ **Sinais Cl√≠nicos**`,
    `Manifesta√ß√µes que observamos nos pacientes`,
    ``,
    `## üß™ **Exames Complementares**`,
    `Ferramentas diagn√≥sticas e achados esperados`,
    ``,
    `## ‚úÖ **Diagn√≥stico**`,
    `Como estabelecer o diagn√≥stico (incluindo sensibilidade/especificidade quando aplic√°vel)`,
    ``,
    `## üíä **Tratamento**`,
    `Protocolos terap√™uticos padr√£o e alternativas`,
    ``,
    `## ü§î **Diagn√≥sticos Diferenciais**`,
    `Outras condi√ß√µes que podem confundir o diagn√≥stico`,
    ``,
    `## üéØ **Pontos High-Yield**`,
    `Dicas importantes para n√£o esquecer na prova`,
    ``,
    `## üìö **Correla√ß√µes Cl√≠nicas**`,
    `Conex√µes importantes para facilitar o aprendizado`,
    ``,
    `üìñ **Refer√™ncias:** NELSON & COUTO, PLUMB'S, BSAVA, DiBARTOLA, CUNNINGHAM + consensos atuais`,
    ``,
    `üéì Vamos come√ßar nossa revis√£o educativa sobre **${topics}**! üöÄ`,
  ].filter(Boolean).join("\n\n");
};

// --- Prompts especializados solicitados pelo usu√°rio ---
export function composeDrLuzaumSystemPrompt(): string {
  return [
    `Papel: Voc√™ √© o Dr. Luzaum, um agente tutor para resid√™ncia em medicina veterin√°ria (pequenos animais) que executa revis√µes liter√°rias completas sobre o assunto de cada quest√£o do app ap√≥s o usu√°rio responder e confirmar sua resposta. Entregue conte√∫do n√≠vel p√≥s-doutorado, mas comece sempre pelo b√°sico (mini-recapitula√ß√£o conceitual) e avance rapidamente para aprofundamento cl√≠nico e fisiopatol√≥gico. Use linguagem clara, objetiva, com organiza√ß√£o impec√°vel e alguns emojis para ancoragem de mem√≥ria (sem exageros).`,
    ``,
    `Fontes & Prioridades (obrigat√≥rio):`,
    `1) Livros do usu√°rio (citar cap√≠tulo e p√°gina): Nelson & Couto; DiBartola; Cunningham; Plumb‚Äôs; (quando aplic√°vel) Fossum; Dewey & da Costa; Coyner.`,
    `2) Consensos/Guias atuais (ACVIM/AAHA/WSAVA/iCatCare) e artigos (PubMed/SciELO).`,
    `3) Se faltar nos livros, complemente com artigos/consensos, sempre citando (autor, ano, peri√≥dico/organiza√ß√£o, DOI/identificador quando dispon√≠vel).`,
    ``,
    `Pesquisa antes de responder: fa√ßa busca breve/direcionada para confirmar pontos cr√≠ticos (cutoffs, doses, S/E/VPP/VPN, dura√ß√£o de terapia, nomenclatura). Em controv√©rsia, apresente correntes e n√≠vel de evid√™ncia.`,
    ``,
    `Cita√ß√µes (obrigat√≥rio):`,
    `- Livros: Livro, Cap. X, p. Y‚ÄìZ.`,
    `- Consensos/artigos: Autor (Ano) ‚Äî T√≠tulo, Peri√≥dico/√ìrg√£o. Evite cita√ß√µes vagas.`,
    ``,
    `Profundidade & Did√°tica (obrigat√≥rio): Inclua quando aplic√°vel: Etiologia, Epidemiologia/fatores de risco, Anatomia/Fisiologia aplicada, Fisiopatologia (sequ√™ncia causal), Diagn√≥stico (cl√≠nico + complementares) com sensibilidade, especificidade, VPP, VPN e por qu√™; achados esperados (hemograma, bioqu√≠mica, urin√°lise, copro, imagem) conectando fisiologia‚Üíachado; Tratamento (c√£es√ógatos, mecanismo, dose mg/kg, via, intervalo, dura√ß√£o, monitoriza√ß√£o, intera√ß√µes, contraindica√ß√µes), Progn√≥stico, Complica√ß√µes, Red flags, High‚ÄëYield, Pegadinhas.`,
    `Foco no tema espec√≠fico: Use EXCLUSIVAMENTE o campo 'most_specific_topic' do payload como tema nuclear. Evite defini√ß√µes gen√©ricas (ex.: "o que √© epidemiologia"). Em cada se√ß√£o, fale da doen√ßa/condi√ß√£o espec√≠fica.`,
    `Valida√ß√£o silenciosa (5 passes) ANTES de responder: (1) todas as se√ß√µes se referem a 'most_specific_topic'; (2) sem conte√∫do gen√©rico; (3) exames/valores compat√≠veis com esp√©cie e √°rea; (4) terapias com dose mg/kg plaus√≠veis; (5) refer√™ncias coerentes. N√£o exponha o racioc√≠nio; apenas a resposta final.`,
    `Corre√ß√£o minuciosa das alternativas: explique por que cada incorreta est√° errada e a correta certa, com fisiologia/patog√™nese/evid√™ncias.`,
    `Exerc√≠cios de fixa√ß√£o: 3‚Äì5 MCQs ao final (sem gabarito vis√≠vel).`,
    `Pol√≠tica de racioc√≠nio: n√£o exponha cadeia de racioc√≠nio interna; forne√ßa conclus√µes justificadas com evid√™ncias e refer√™ncias.`,
    `Tom & Formata√ß√£o: cabe√ßalhos, listas curtas, tabelas quando √∫til; poucos emojis (üß†üî¨üíäü©∫‚ö†Ô∏èüèÅ); assertivo, cl√≠nico e verific√°vel.`,
  ].join("\n");
}

export function composeDrLuzaumActionPrompt(): string {
  return [
    `PROMPT DE A√á√ÉO ‚Äî Revis√£o Liter√°ria P√≥s-Resposta`,
    `Tarefa: Dado o JSON da quest√£o (abaixo), gere uma revis√£o completa e did√°tica seguindo o formato especificado.`,
    `Obrigat√≥rio: Validar tema; identificar subt√≥picos; confirmar valores cr√≠ticos em livros/consensos; cobrir se√ß√µes solicitadas; corrigir alternativas; propor 3‚Äì5 MCQs sem gabarito.`,
    `Sa√≠da: Markdown estruturado com as se√ß√µes: Vis√£o Geral (b√°sico‚Üíavan√ßado), Etiologia, Epidemiologia, Anatomia/Fisiologia, Fisiopatologia (sequ√™ncia causal), Diagn√≥stico (com acur√°cia ‚Äî sens, espec, VPP, VPN e limita√ß√µes), Diferenciais, Tratamento (c√£es√ógatos, doses mg/kg, via, intervalo, dura√ß√£o, monitoriza√ß√£o, intera√ß√µes, contraindica√ß√µes), Progn√≥stico/Follow‚Äëup, High‚ÄëYield, Pegadinhas, Corre√ß√£o Minuciosa das Alternativas (A‚Ä¶E), Exerc√≠cios de Fixa√ß√£o (3‚Äì5).`,
  ].join("\n");
}

export function buildQuestionPayload(q: Question, userAnswer?: string | null) {
  const normalize = (s: string) => s.normalize('NFD').replace(/\p{Diacritic}/gu, '').toLowerCase().trim();
  const isGeneric = (t: string) => {
    const k = normalize(t);
    return (
      /logia$/.test(k) ||
      [
        'gastroenterologia','neurologia','cardiologia','dermatologia','endocrinologia',
        'hemostasia','hematologia','sus','saude publica','diagnostico por imagem',
        'laboratorio clinico','anestesiologia','ortopedia'
      ].includes(k)
    );
  };
  const mostSpecificTopic = (() => {
    const tags = q.topic_tags || [];
    const specific = tags.filter(t => !isGeneric(t));
    if (specific.length > 0) return specific[0];
    if (tags.length > 0) return [...tags].sort((a,b)=>b.length-a.length)[0];
    return q.area_tags?.[0] || 'tema';
  })();
  const mapArea = (a: string): string => {
    const k = a.normalize('NFD').replace(/\p{Diacritic}/gu, '').toLowerCase();
    if (k.includes('saude publica')) return 'saude_publica';
    if (k.includes('clinica medica')) return 'clinica_medica';
    if (k.includes('clinica cirurgica')) return 'clinica_cirurgica';
    if (k.includes('anestesiologia')) return 'anestesiologia';
    if (k.includes('diagnostico por imagem')) return 'diagnostico_por_imagem';
    if (k.includes('laboratorio clinico')) return 'laboratorio_clinico';
    return 'clinica_medica';
  };
  return {
    area_conhecimento: mapArea(q.area_tags[0] || ''),
    questao_id: q.id,
    enunciado: q.stem,
    alternativas: q.options.map(o => ({ letra: o.label, texto: o.text })),
    alternativa_marcada_pelo_usuario: (userAnswer || '').toUpperCase() || undefined,
    alternativa_correta: q.answer_key,
    especie_alvo: 'ambos',
    contexto_extra: '',
    ids_biblioteca_usuario: [] as string[],
    meta: {
      area_tags: q.area_tags,
      topic_tags: q.topic_tags,
      fonte: `${q.exam}-${q.year}`,
      dificuldade: q.difficulty,
      most_specific_topic: mostSpecificTopic
    }
  } as any;
}

export async function generateLuzaumReview(q: Question, init?: RequestInit): Promise<string> {
  const openaiKey = getOpenAIKey();
  const geminiKey = getGeminiApiKey();

  // Constr√≥i payload e prompts completos
  const payload = buildQuestionPayload(q);
  const system = composeDrLuzaumSystemPrompt();
  const action = composeDrLuzaumActionPrompt();
  const guard = `Regras adicionais obrigat√≥rias:\n- Analise primeiro a doen√ßa/problema de 'meta.most_specific_topic'.\n- SOMENTE depois execute pesquisa breve em livros/consensos/artigos (citados).\n- Em seguida, encaixe o que encontrou nas se√ß√µes pedidas (Etiologia, Epidemiologia, etc.).\n- Valide em 5 passes se cada se√ß√£o se refere √† doen√ßa/condi√ß√£o espec√≠fica (sem defini√ß√µes gen√©ricas). Se falhar, refa√ßa. N√£o mostre nada ao usu√°rio at√© concluir.`;
  const combinedForGemini = [system, '', action, '', 'Dados da quest√£o (JSON):', JSON.stringify(payload)].join('\n\n');

  // Preferir OpenAI quando dispon√≠vel
  if (openaiKey) {
    const openaiModel = getOpenAIModel();
    const res = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${openaiKey}` },
      body: JSON.stringify({
        model: openaiModel,
        temperature: 0.2,
        max_tokens: 3500,
        messages: [
          { role: 'system', content: system },
          { role: 'system', content: guard },
          { role: 'user', content: action },
          { role: 'user', content: 'Dados da quest√£o (JSON):' },
          { role: 'user', content: JSON.stringify(payload) }
        ]
      }),
      ...(init || {})
    });
    if (!res.ok) throw new Error(`OpenAI erro ${res.status}: ${await res.text()}`);
    const data = await res.json();
    const text = data?.choices?.[0]?.message?.content || '';
    if (!text) throw new Error('Resposta vazia do OpenAI');
    return text as string;
  }

  if (!geminiKey) {
    throw new Error('Nenhum provedor configurado. Defina VITE_OPENAI_API_KEY ou VITE_GEMINI_API_KEY.');
  }

  const model = DEFAULT_MODEL;
  const url = `${API_BASE}/models/${encodeURIComponent(model)}:generateContent?key=${encodeURIComponent(geminiKey)}`;
  const body = {
    contents: [
      { role: "user", parts: [{ text: [combinedForGemini, '', guard].join('\n\n') }] }
    ],
    generationConfig: { temperature: 0.2, topP: 0.95, topK: 40, maxOutputTokens: 4096 }
  };
  let res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body), ...(init || {}) });
  if (!res.ok) throw new Error(`Gemini erro ${res.status}: ${await res.text()}`);
  const data = await res.json();
  const draft = data?.candidates?.[0]?.content?.parts?.map((p: any) => p?.text).join('\n\n');
  if (!draft) throw new Error('Resposta vazia do Gemini');
  return draft as string;
}

